# Script d'initialisation pour l'utilisateur niveau25

import os
import socket
import random
import CTF_lib
import niveau23
import multiprocessing

def main():
    NIVEAU = 22
    SUIVANT = 23
    PORT = 31001
    mdp_attendu = CTF_lib.get_mdp_hash(NIVEAU)

    # G√©n√©ration du mot de passe du niveau suivant
    mdp_suivant = CTF_lib.get_mdp_hash(SUIVANT)
    CTF_lib.ecrire_fichier_mdp(SUIVANT, mdp_suivant)
    print(f"[DEBUG] mdp_attendu: {mdp_attendu}")
    print(f"[DEBUG] mdp_suivant: {mdp_suivant}")

    # Lancer le serveur UDP dans un processus s√©par√©
    def serveur_udp():
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.bind(('0.0.0.0', PORT))
            print(f"[DEBUG] Serveur UDP lanc√© sur le port {PORT}.")
            while True:
                data, addr = s.recvfrom(1024)
                message = data.decode().strip()
                print(f"[DEBUG] Re√ßu '{message}' de {addr}")
                if message == mdp_attendu:
                    s.sendto(mdp_suivant.encode(), addr)
                    print(f"[DEBUG] Envoi du mdp_suivant √† {addr}")
                else:
                    s.sendto(b"Nope\n", addr)
                    print(f"[DEBUG] Envoi de 'Nope' √† {addr}")

    p = multiprocessing.Process(target=serveur_udp)
    p.start()
    print("[DEBUG] Processus du serveur UDP d√©marr√©.")

    # Fichier readme
    contenu_readme = f"""Bienvenue dans le niveau {NIVEAU} du CTF hackathon.

L'objectif de ce niveau :
Communiquer avec un service UDP local pour obtenir le mot de passe du niveau suivant.

Pour t'aider :
Le serveur √©coute sur le port {PORT} et attend que tu lui envoies le bon mot de passe en UDP.

‚ÑπÔ∏è :
Trouve la bonne commande

Bonne chance, et n‚Äôoublie pas : ouvre les üëÄ
"""
    chemin_readme = f"/home/niveau{NIVEAU}/readme"
    with open(chemin_readme, "w") as f:
        f.write(contenu_readme)
    print(f"[DEBUG] Fichier readme cr√©√© en {chemin_readme}")

    os.system(f"chown niveau{NIVEAU}:niveau{NIVEAU} {chemin_readme}")
    os.system(f"chmod 640 {chemin_readme}")
    print("[DEBUG] Permissions du readme attribu√©es.")

    # Restreindre le home
    CTF_lib.dossier_home_lecture(NIVEAU)
    print(f"[DEBUG] Home restreint pour le niveau {NIVEAU}")

    # Lancer niveau suivant
    print("[DEBUG] Lancement du niveau suivant.")
    niveau23.main()

if __name__ == '__main__':
    main()
